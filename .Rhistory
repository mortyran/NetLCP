load("./THCA_Analysis_second.RData")
#################################################### clinical cox plot ###########################################
ClinicalData_tumor_cox = ClinicalData_tumor %>% dplyr::select(submitter_id.samples, age_at_initial_pathologic_diagnosis, gender.demographic, neoplasm_length, pathologic_T, pathologic_N, tumor_stage.diagnoses, primary_neoplasm_focus_type, extrathyroid_carcinoma_present_extension_status,primary_thyroid_gland_neoplasm_location_anatomic_site, PFI, PFI.time)
ClinicalData_tumor_cox = ClinicalData_tumor_cox %>% filter(pathologic_T!="" & pathologic_N!="" & tumor_stage.diagnoses!="not reported" & primary_neoplasm_focus_type!="" & extrathyroid_carcinoma_present_extension_status!="" & primary_thyroid_gland_neoplasm_location_anatomic_site!="" & pathologic_N!="NX") %>% na.omit()
# fwrite(ClinicalData_tumor_cox, file = "ClinicalData_tumor_cox.txt", sep = "\t", quote = F, col.names = T, row.names = F)
ClinicalData_tumor_cox$pathologic_T = sapply(ClinicalData_tumor_cox$pathologic_T, function(x){
if(grepl("T1", x)){
x = "T1"
}else if(grepl("T2", x)){
x = "T2"
}else if(grepl("T3", x)){
x = "T3"
}else if(grepl("T4", x)){
x = "T4"
}
return(x)
})
ClinicalData_tumor_cox$pathologic_N = sapply(ClinicalData_tumor_cox$pathologic_N, function(x){
if(grepl("N0", x)){
x = "N0"
}else if(grepl("N1", x)){
x = "N1"
}
return(x)
})
ClinicalData_tumor_cox$tumor_stage.diagnoses = sapply(ClinicalData_tumor_cox$tumor_stage.diagnoses, function(x){
if(x == "stage i"){
x = "StageI&StageII"
}else if(x == "stage ii"){
x = "StageI&StageII"
}else if(x == "stage iii"){
x = "StageIII&StageIV"
}else if(x == "stage iv" | x == "stage iva" | x == "stage ivc"){
x = "StageIII&StageIV"
}
return(x)
})
# ClinicalData_tumor_cox$pathologic_M = sapply(ClinicalData_tumor_cox$pathologic_M, function(x){
#   if(grepl("M0", x)){
#     x = "M0&MX"
#   }else if(grepl("M1", x)){
#     x = "M1"
#   }else if(grepl("MX", x)){
#     x = "M0&MX"
#   }
# })
ClinicalData_tumor_cox$extrathyroid_carcinoma_present_extension_status = sapply(ClinicalData_tumor_cox$extrathyroid_carcinoma_present_extension_status, function(x){
if(x == "None"){
x = "None"
}else if(x == "Moderate/Advanced (T4a)" | x == "Very Advanced (T4b)"){
x = "Moderate/Advanced (T4)"
}else if(x == "Minimal (T3)"){
x = "Minimal (T3)"
}
})
ClinicalData_tumor_cox$primary_thyroid_gland_neoplasm_location_anatomic_site = sapply(ClinicalData_tumor_cox$primary_thyroid_gland_neoplasm_location_anatomic_site, function(x){
if(x == "Bilateral"){
x = "Bilateral"
}else if(x == "Isthmus"){
x = "Isthmus"
}else if(x == "Right lobe" | x == "Left lobe"){
x = "Unilateral"
}
})
ClinicalData_tumor_cox$age_at_initial_pathologic_diagnosis = ifelse(ClinicalData_tumor_cox$age_at_initial_pathologic_diagnosis <= 55, "<=55 years", ">55 years")
ClinicalData_tumor_cox$neoplasm_length = ifelse(ClinicalData_tumor_cox$neoplasm_length <= 2, "<=2 cm", ">2 cm")
clinical_RiskScore = RiskScore
clinical_RiskScore$submitter_id.samples = rownames(clinical_RiskScore)
clinical_RiskScore = clinical_RiskScore[,-c(2,3,4)]
ClinicalData_tumor_cox = ClinicalData_tumor_cox %>% left_join(., clinical_RiskScore)
colnames(ClinicalData_tumor_cox) = c("Sample", "Age", "Gender", "TumorSize", "pathologic_T", "N", "AJCCStage", 'Multifocality', "Aggresive", "AnatomicSite", "PFI", "PFI.time", "RiskScore")
###################################################################### complete data ###################################################################
RiskCoxLncExp = THCA_logfpkm_tumor[rownames(THCA_logfpkm_tumor) %in% sig_lnc_multi_cox,]
RiskCoxLncExp = RiskCoxLncExp[order(rownames(RiskCoxLncExp)),]
RiskCoxLncExp = RiskCoxLncExp[,order(colnames(RiskCoxLncExp))]
RiskCoxLncExp = RiskCoxLncExp %>% t()
LncRiskCoef = res.cox_train$coefficients
LncRiskCoef = LncRiskCoef[order(gsub("`", "", names(LncRiskCoef)))]
all(gsub("`", "", names(LncRiskCoef)) == colnames(RiskCoxLncExp))
RiskScore = apply(RiskCoxLncExp, 1, function(x){x * LncRiskCoef}) %>% t()
RiskScore = rowSums(RiskScore)%>% data.frame()
colnames(RiskScore) = "RiskScore"
all(rownames(RiskScore) == ClinicalData_tumor$submitter_id.samples)
RiskScore = cbind(RiskScore, ClinicalData_tumor[,c(25, 26)])
library(survival)
library(survminer)
# Determine the optimal cutpoint of variables
riskscore_cut_complete <- surv_cutpoint(RiskScore,
time = "PFI.time",
event = "PFI",
variables = c("RiskScore")
)
riskscore_cut_complete = riskscore_cut_complete$cutpoint[1] %>% as.numeric()
RiskScore$Group = ifelse(RiskScore$RiskScore >= riskscore_cut_complete, "HighRisk", "LowRisk")
# construct muticox data
all(rownames(RiskCoxLncExp) == ClinicalData_tumor$submitter_id.samples)
#################################################### clinical cox plot ###########################################
ClinicalData_tumor_cox = ClinicalData_tumor %>% dplyr::select(submitter_id.samples, age_at_initial_pathologic_diagnosis, gender.demographic, neoplasm_length, pathologic_T, pathologic_N, tumor_stage.diagnoses, primary_neoplasm_focus_type, extrathyroid_carcinoma_present_extension_status,primary_thyroid_gland_neoplasm_location_anatomic_site, PFI, PFI.time)
ClinicalData_tumor_cox = ClinicalData_tumor_cox %>% filter(pathologic_T!="" & pathologic_N!="" & tumor_stage.diagnoses!="not reported" & primary_neoplasm_focus_type!="" & extrathyroid_carcinoma_present_extension_status!="" & primary_thyroid_gland_neoplasm_location_anatomic_site!="" & pathologic_N!="NX") %>% na.omit()
# fwrite(ClinicalData_tumor_cox, file = "ClinicalData_tumor_cox.txt", sep = "\t", quote = F, col.names = T, row.names = F)
ClinicalData_tumor_cox$pathologic_T = sapply(ClinicalData_tumor_cox$pathologic_T, function(x){
if(grepl("T1", x)){
x = "T1"
}else if(grepl("T2", x)){
x = "T2"
}else if(grepl("T3", x)){
x = "T3"
}else if(grepl("T4", x)){
x = "T4"
}
return(x)
})
ClinicalData_tumor_cox$pathologic_N = sapply(ClinicalData_tumor_cox$pathologic_N, function(x){
if(grepl("N0", x)){
x = "N0"
}else if(grepl("N1", x)){
x = "N1"
}
return(x)
})
ClinicalData_tumor_cox$tumor_stage.diagnoses = sapply(ClinicalData_tumor_cox$tumor_stage.diagnoses, function(x){
if(x == "stage i"){
x = "StageI&StageII"
}else if(x == "stage ii"){
x = "StageI&StageII"
}else if(x == "stage iii"){
x = "StageIII&StageIV"
}else if(x == "stage iv" | x == "stage iva" | x == "stage ivc"){
x = "StageIII&StageIV"
}
return(x)
})
# ClinicalData_tumor_cox$pathologic_M = sapply(ClinicalData_tumor_cox$pathologic_M, function(x){
#   if(grepl("M0", x)){
#     x = "M0&MX"
#   }else if(grepl("M1", x)){
#     x = "M1"
#   }else if(grepl("MX", x)){
#     x = "M0&MX"
#   }
# })
ClinicalData_tumor_cox$extrathyroid_carcinoma_present_extension_status = sapply(ClinicalData_tumor_cox$extrathyroid_carcinoma_present_extension_status, function(x){
if(x == "None"){
x = "None"
}else if(x == "Moderate/Advanced (T4a)" | x == "Very Advanced (T4b)"){
x = "Moderate/Advanced (T4)"
}else if(x == "Minimal (T3)"){
x = "Minimal (T3)"
}
})
ClinicalData_tumor_cox$primary_thyroid_gland_neoplasm_location_anatomic_site = sapply(ClinicalData_tumor_cox$primary_thyroid_gland_neoplasm_location_anatomic_site, function(x){
if(x == "Bilateral"){
x = "Bilateral"
}else if(x == "Isthmus"){
x = "Isthmus"
}else if(x == "Right lobe" | x == "Left lobe"){
x = "Unilateral"
}
})
ClinicalData_tumor_cox$age_at_initial_pathologic_diagnosis = ifelse(ClinicalData_tumor_cox$age_at_initial_pathologic_diagnosis <= 55, "<=55 years", ">55 years")
ClinicalData_tumor_cox$neoplasm_length = ifelse(ClinicalData_tumor_cox$neoplasm_length <= 2, "<=2 cm", ">2 cm")
clinical_RiskScore = RiskScore
clinical_RiskScore$submitter_id.samples = rownames(clinical_RiskScore)
clinical_RiskScore = clinical_RiskScore[,-c(2,3,4)]
ClinicalData_tumor_cox = ClinicalData_tumor_cox %>% left_join(., clinical_RiskScore)
colnames(ClinicalData_tumor_cox) = c("Sample", "Age", "Gender", "TumorSize", "pathologic_T", "N", "AJCCStage", 'Multifocality', "Aggresive", "AnatomicSite", "PFI", "PFI.time", "RiskScore")
BRAF_Mutation = fread("./BRAFV600E.txt", header = T)
BRAF_Mutation$sample = gsub("-", ".", BRAF_Mutation$sample)
BRAF_Mutation$BRAF_V600E = ifelse(grepl("BRAF:p.V600E", BRAF_Mutation$mutCancerGeneCensusProtein_Change), 1, 0)
BRAF_Mutation = BRAF_Mutation[,c(1,3)]
colnames(BRAF_Mutation) = c("Sample", "BRAF_V600E")
ClinicalData_tumor_cox = ClinicalData_tumor_cox[ClinicalData_tumor_cox$Sample %in% BRAF_Mutation$Sample, ]
ClinicalData_tumor_cox = left_join(ClinicalData_tumor_cox, BRAF_Mutation, by = "Sample")
############## Variable coding ######################
ClinicalData_tumor_cox_coding = ClinicalData_tumor_cox
ClinicalData_tumor_cox_coding$Age = ifelse(ClinicalData_tumor_cox_coding$Age == "<=55 years", 0, 1)
ClinicalData_tumor_cox_coding$Gender = ifelse(ClinicalData_tumor_cox_coding$Gender == "female", 0, 1)
ClinicalData_tumor_cox_coding$TumorSize = ifelse(ClinicalData_tumor_cox_coding$TumorSize == "<=2 cm", 0, 1)
ClinicalData_tumor_cox_coding$pathologic_T = sapply(ClinicalData_tumor_cox_coding$pathologic_T, function(x){
if(x == "T1"){
x = 1
}else if(x == "T2"){
X = 2
}else if(x == "T3"){
x = 3
}else if(x == "T4"){
x = 4
}else if(x == "TX"){
x = 0
}
})
ClinicalData_tumor_cox_coding$N = ifelse(ClinicalData_tumor_cox_coding$N == "N0", 0, 1)
# ClinicalData_tumor_cox_coding$M = ifelse(ClinicalData_tumor_cox_coding$M == "M0&MX", 0, 1)
ClinicalData_tumor_cox_coding$AJCCStage = ifelse(ClinicalData_tumor_cox_coding$AJCCStage == "StageI&StageII", 1, 2)
ClinicalData_tumor_cox_coding$Multifocality = ifelse(ClinicalData_tumor_cox_coding$Multifocality == "Unifocal", 1, 2)
ClinicalData_tumor_cox_coding$Aggresive = sapply(ClinicalData_tumor_cox_coding$Aggresive, function(x){
if(x == "None"){
x = 0
}else if(x == "Minimal (T3)"){
X = 1
}else if(x == "Moderate/Advanced (T4)"){
x = 2
}
})
ClinicalData_tumor_cox_coding$AnatomicSite = sapply(ClinicalData_tumor_cox_coding$AnatomicSite, function(x){
if(x == "Isthmus"){
x = 1
}else if(x == "Unilateral"){
X = 2
}else if(x == "Bilateral"){
x = 3
}
})
################## clinical single cox ####################
############# complete data ###############
### single cox ###
clinicalFeature = c()
HRCI_low = c()
HRCI_high = c()
HR_exp = c()
HR_pvalue = c()
sapply(colnames(ClinicalData_tumor_cox_coding)[c(2:10, 13:14)], function(x){
res.cox = summary(coxph(Surv(PFI.time, PFI) ~ get(x), data = ClinicalData_tumor_cox_coding))
clinicalFeature <<- append(clinicalFeature, x)
HRCI_low <<- append(HRCI_low, sprintf("%0.3f", res.cox$conf.int[,3]))
HRCI_high <<- append(HRCI_high, sprintf("%0.3f", res.cox$conf.int[,4]))
HR_exp <<- append(HR_exp, sprintf("%0.3f", res.cox$coefficients[2]))
HR_pvalue <<- append(HR_pvalue, sprintf("%0.3f", res.cox$coefficients[5]))
})
data.frame(clinicalFeature=clinicalFeature, HR_pvalue=HR_pvalue)
# The rest of the columns in the table.
tabletext <- cbind(c("","\n", clinicalFeature),
c("HR(95% CI)", "\n", paste0(HR_exp, " (", HRCI_low, ", ", HRCI_high, ")")),
c("P Value","\n",HR_pvalue)
)
library(forestplot)
svglite(filename = "../Results/Figures/Add/clinical_singleCox_Forest_complete.svg", width = 8, height = 5)
forestplot(labeltext=tabletext,
graph.pos = 4,
mean=c(NA, NA, as.numeric(HR_exp)),
lower=c(NA, NA, as.numeric(HRCI_low)), upper=c(NA, NA, as.numeric(HRCI_high)),
col=fpColors(box="red", lines="#1939B7", zero = "gray50"),
zero=1,
line.margin = 1,
cex=0.9, lineheight = "auto",
colgap=unit(5,"mm"),
lwd.ci=2, boxsize=0.12,
ci.vertices=TRUE, ci.vertices.height = 0.1) # the
dev.off()
### multi cox ###
res.cox = coxph(Surv(PFI.time, PFI) ~ Age + Gender + TumorSize + pathologic_T + N + AJCCStage + Multifocality + Aggresive + AnatomicSite + RiskScore + BRAF_V600E, data = ClinicalData_tumor_cox_coding)
# Scope = list(upper =~ .)
# res.cox = stepAIC(res.cox, Scope, direction = "both")
res.cox_sum = summary(res.cox)
clinicalFeature = rownames(res.cox_sum$coefficients)
HRCI_low = sprintf("%0.3f", res.cox_sum$conf.int[,3])
HRCI_high = sprintf("%0.3f", res.cox_sum$conf.int[,4])
HR_exp = sprintf("%0.3f", res.cox_sum$conf.int[,1])
HR_pvalue = sprintf("%0.3f", res.cox_sum$coefficients[,5])
data.frame(clinicalFeature=clinicalFeature, HR_pvalue=HR_pvalue)
# The rest of the columns in the table.
tabletext <- cbind(c("","\n", clinicalFeature),
c("HR(95% CI)", "\n", paste0(HR_exp, " (", HRCI_low, ", ", HRCI_high, ")")),
c("P Value","\n",HR_pvalue)
)
library(forestplot)
svglite(filename = "../Results/Figures/Add/clinical_mutivarCox_Forest_complete.svg", width = 8, height = 5)
forestplot(labeltext=tabletext,
graph.pos = 4,
mean=c(NA, NA, as.numeric(HR_exp)),
lower=c(NA, NA, as.numeric(HRCI_low)), upper=c(NA, NA, as.numeric(HRCI_high)),
col=fpColors(box="red", lines="#1939B7", zero = "gray50"),
zero=1,
line.margin = 1,
cex=0.9, lineheight = "auto",
colgap=unit(5,"mm"),
lwd.ci=2, boxsize=0.12,
ci.vertices=TRUE, ci.vertices.height = 0.1) # the
dev.off()
############ training data #####################
ClinicalData_training_cox_coding = ClinicalData_tumor_cox_coding[ClinicalData_tumor_cox_coding$Sample %in% colnames(THCA_logfpkm_train),]
### single cox ###
clinicalFeature = c()
HRCI_low = c()
HRCI_high = c()
HR_exp = c()
HR_pvalue = c()
sapply(colnames(ClinicalData_training_cox_coding)[c(2:10, 13:14)], function(x){
res.cox = summary(coxph(Surv(PFI.time, PFI) ~ get(x), data = ClinicalData_training_cox_coding))
clinicalFeature <<- append(clinicalFeature, x)
HRCI_low <<- append(HRCI_low, sprintf("%0.3f", res.cox$conf.int[,3]))
HRCI_high <<- append(HRCI_high, sprintf("%0.3f", res.cox$conf.int[,4]))
HR_exp <<- append(HR_exp, sprintf("%0.3f", res.cox$coefficients[2]))
HR_pvalue <<- append(HR_pvalue, sprintf("%0.3f", res.cox$coefficients[5]))
})
data.frame(clinicalFeature=clinicalFeature, HR_pvalue=HR_pvalue)
# The rest of the columns in the table.
tabletext <- cbind(c("","\n", clinicalFeature),
c("HR(95% CI)", "\n", paste0(HR_exp, " (", HRCI_low, ", ", HRCI_high, ")")),
c("P Value","\n",HR_pvalue)
)
svglite(filename = "../Results/Figures/Add/clinical_singleCox_Forest_training.svg", width = 8, height = 5)
forestplot(labeltext=tabletext,
graph.pos = 4,
mean=c(NA, NA, as.numeric(HR_exp)),
lower=c(NA, NA, as.numeric(HRCI_low)), upper=c(NA, NA, as.numeric(HRCI_high)),
col=fpColors(box="red", lines="#1939B7", zero = "gray50"),
zero=1,
line.margin = 1,
cex=0.9, lineheight = "auto",
colgap=unit(5,"mm"),
lwd.ci=2, boxsize=0.12,
ci.vertices=TRUE, ci.vertices.height = 0.1) # the
dev.off()
### multi cox ###
res.cox = coxph(Surv(PFI.time, PFI) ~ Age + Gender + TumorSize + pathologic_T + N + AJCCStage + Multifocality + Aggresive + AnatomicSite + RiskScore + BRAF_V600E, data = ClinicalData_training_cox_coding)
# Scope = list(upper =~ .)
# res.cox = stepAIC(res.cox, Scope, direction = "both")
res.cox_sum = summary(res.cox)
clinicalFeature = rownames(res.cox_sum$coefficients)
HRCI_low = sprintf("%0.3f", res.cox_sum$conf.int[,3])
HRCI_high = sprintf("%0.3f", res.cox_sum$conf.int[,4])
HR_exp = sprintf("%0.3f", res.cox_sum$conf.int[,1])
HR_pvalue = sprintf("%0.3f", res.cox_sum$coefficients[,5])
data.frame(clinicalFeature=clinicalFeature, HR_pvalue=HR_pvalue)
# The rest of the columns in the table.
tabletext <- cbind(c("","\n", clinicalFeature),
c("HR(95% CI)", "\n", paste0(HR_exp, " (", HRCI_low, ", ", HRCI_high, ")")),
c("P Value","\n",HR_pvalue)
)
library(forestplot)
svglite(filename = "../Results/Figures/Add/clinical_mutivarCox_Forest_training.svg", width = 8, height = 5)
forestplot(labeltext=tabletext,
graph.pos = 4,
mean=c(NA, NA, as.numeric(HR_exp)),
lower=c(NA, NA, as.numeric(HRCI_low)), upper=c(NA, NA, as.numeric(HRCI_high)),
col=fpColors(box="red", lines="#1939B7", zero = "gray50"),
zero=1,
line.margin = 1,
cex=0.9, lineheight = "auto",
colgap=unit(5,"mm"),
lwd.ci=2, boxsize=0.12,
ci.vertices=TRUE, ci.vertices.height = 0.1) # the
dev.off()
############ test data #####################
ClinicalData_test_cox_coding = ClinicalData_tumor_cox_coding[ClinicalData_tumor_cox_coding$Sample %in% colnames(THCA_logfpkm_test),]
### single cox ###
clinicalFeature = c()
HRCI_low = c()
HRCI_high = c()
HR_exp = c()
HR_pvalue = c()
sapply(colnames(ClinicalData_test_cox_coding)[c(2:10, 13:14)], function(x){
res.cox = summary(coxph(Surv(PFI.time, PFI) ~ get(x), data = ClinicalData_test_cox_coding))
clinicalFeature <<- append(clinicalFeature, x)
HRCI_low <<- append(HRCI_low, sprintf("%0.3f", res.cox$conf.int[,3]))
HRCI_high <<- append(HRCI_high, sprintf("%0.3f", res.cox$conf.int[,4]))
HR_exp <<- append(HR_exp, sprintf("%0.3f", res.cox$coefficients[2]))
HR_pvalue <<- append(HR_pvalue, sprintf("%0.3f", res.cox$coefficients[5]))
})
data.frame(clinicalFeature=clinicalFeature, HR_pvalue=HR_pvalue)
# The rest of the columns in the table.
tabletext <- cbind(c("","\n", clinicalFeature),
c("HR(95% CI)", "\n", paste0(HR_exp, " (", HRCI_low, ", ", HRCI_high, ")")),
c("P Value","\n",HR_pvalue)
)
svglite(filename = "../Results/Figures/Add/clinical_singleCox_Forest_test.svg", width = 8, height = 5)
forestplot(labeltext=tabletext,
graph.pos = 4,
mean=c(NA, NA, as.numeric(HR_exp)),
lower=c(NA, NA, as.numeric(HRCI_low)), upper=c(NA, NA, as.numeric(HRCI_high)),
col=fpColors(box="red", lines="#1939B7", zero = "gray50"),
zero=1,
line.margin = 1,
cex=0.9, lineheight = "auto",
colgap=unit(5,"mm"),
lwd.ci=2, boxsize=0.12,
ci.vertices=TRUE, ci.vertices.height = 0.1) # the
dev.off()
### multi cox ###
res.cox = coxph(Surv(PFI.time, PFI) ~ Age + Gender + TumorSize + pathologic_T + N + AJCCStage + Multifocality + Aggresive + AnatomicSite + RiskScore + BRAF_V600E, data = ClinicalData_test_cox_coding)
# Scope = list(upper =~ .)
# res.cox = stepAIC(res.cox, Scope, direction = "both")
res.cox_sum = summary(res.cox)
clinicalFeature = rownames(res.cox_sum$coefficients)
HRCI_low = sprintf("%0.3f", res.cox_sum$conf.int[,3])
HRCI_high = sprintf("%0.3f", res.cox_sum$conf.int[,4])
HR_exp = sprintf("%0.3f", res.cox_sum$conf.int[,1])
HR_pvalue = sprintf("%0.3f", res.cox_sum$coefficients[,5])
data.frame(clinicalFeature=clinicalFeature, HR_pvalue=HR_pvalue)
# The rest of the columns in the table.
tabletext <- cbind(c("","\n", clinicalFeature),
c("HR(95% CI)", "\n", paste0(HR_exp, " (", HRCI_low, ", ", HRCI_high, ")")),
c("P Value","\n",HR_pvalue)
)
library(forestplot)
svglite(filename = "../Results/Figures/Add/clinical_mutivarCox_Forest_test.svg", width = 8, height = 5)
forestplot(labeltext=tabletext,
graph.pos = 4,
mean=c(NA, NA, as.numeric(HR_exp)),
lower=c(NA, NA, as.numeric(HRCI_low)), upper=c(NA, NA, as.numeric(HRCI_high)),
col=fpColors(box="red", lines="#1939B7", zero = "gray50"),
zero=1,
line.margin = 1,
cex=0.9, lineheight = "auto",
colgap=unit(5,"mm"),
lwd.ci=2, boxsize=0.12,
ci.vertices=TRUE, ci.vertices.height = 0.1) # the
dev.off()
# load("./THCA_Analysis_second.RData")
save.image("THCA_Analysis_second.RData")
library(NetLCP)
library(NetLCP)
dataInitialize()
NetLCPGUI()
knitr::opts_chunk$set(echo = TRUE, dpi = 600, fig.align='center', out.height = "500px", out.width = "500px", comment = "", fig.width = 15, fig.height = 15)
cs_url = "C:\\Users\\acer\\Desktop\\NetLCP\\Paper\\Tutorial\\CellularSenescenceData"
cs_data = read.table(cs_url, sep = "\t", header = T)
head(cs_data)
lncRNA_prio = BioRegElePrioritization( transcriptomeList = cs_data$Trans_ID,
prioType = "lncRNA",
empiricalPvalue = FALSE )
Reactome_prio = BioRegElePrioritization( transcriptomeList = cs_data$Trans_ID,
prioType = "Reactome",
empiricalPvalue = FALSE )
# Input data preparation
lncRNA_top10 = lncRNA_prio$NodeName[1:10]
Reactome_top10 = Reactome_prio$NodeName[1:10]
local_elements = c(lncRNA_top10, Reactome_top10, cs_data$Trans_ID)
multi_local = multieleRegulation( elementList = local_elements,
regulationType = "lncRNA-miRNA-mRNA-pathway",
allRegulation = FALSE )
head(multi_local)
# Calculate the degree of biological elements in the local heterogenous network.
regStat( regData = multi_local,
filterDegree = 40,
selectNode = NULL )
# network visualization.
regNetVis( regData = multi_local,
filterDegree = 40,
selectNode = NULL,
netLayout = "layout_nicely" )
# if you want to see the associated CREs of the biological
# element "4193" in local area of heterogeous network.
regNetVis( regData = multi_local,
filterDegree = 40,
selectNode = "4193",
netLayout = "layout_nicely" )
```{r}
eQTLsData = eQTLsDetection(regData = multi_local)
# count the eQTLs of single elements.
eQTLsSingleEleStat( regData = multi_local,
eQTLsData = eQTLsData,
filterDegree = 50,
selectNode = NULL )
# count the eQTLs of single elements.
eQTLsSingleEleStat( regData = multi_local,
eQTLsData = eQTLsData,
filterDegree = 40,
selectNode = NULL )
# count the eQTLs of single elements.
eQTLsSingleEleStat( regData = multi_local,
eQTLsData = eQTLsData,
filterDegree = 30,
selectNode = NULL )
# count the eQTLs of CREs.
eQTLsRegStat( regData = multi_local,
eQTLsData = eQTLsData,
regulationType = "lncRNA-miRNA-mRNA-pathway",
filterDegree = 30,
selectNode = NULL )
# count the eQTLs of CREs.
eQTLsRegStat( regData = multi_local,
eQTLsData = eQTLsData,
regulationType = "lncRNA-miRNA-mRNA-pathway",
filterDegree = 20,
selectNode = NULL )
# count the eQTLs of CREs.
eQTLsRegStat( regData = multi_local,
eQTLsData = eQTLsData,
regulationType = "lncRNA-miRNA-mRNA-pathway",
filterDegree = 10,
selectNode = NULL )
# count the eQTLs of CREs.
eQTLsRegStat( regData = multi_local,
eQTLsData = eQTLsData,
regulationType = "lncRNA-miRNA-mRNA-pathway",
filterDegree = 15,
selectNode = NULL )
# count the eQTLs of CREs.
eQTLsRegStat( regData = multi_local,
eQTLsData = eQTLsData,
regulationType = "lncRNA-miRNA-mRNA-pathway",
filterDegree = 20,
selectNode = NULL )
# count the eQTLs of CREs.
eQTLsRegStat( regData = multi_local,
eQTLsData = eQTLsData,
regulationType = "lncRNA-miRNA-mRNA-pathway",
filterDegree = 15,
selectNode = NULL )
# network visualization.
eQTLsNetVis( regData = multi_local,
eQTLsData = eQTLsData,
filterDegree = 30,
selectNode = NULL,
netLayout = "layout_in_circle" )
# count the eQTLs of single elements.
eQTLsSingleEleStat( regData = multi_local,
eQTLsData = eQTLsData,
filterDegree = 15,
selectNode = NULL )
